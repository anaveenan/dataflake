{"title":"Decorators","markdown":{"yaml":{"title":"Decorators","author":"Naveenan Arjunan","date":"2024-03-02","categories":["python","advanced-python"]},"headingText":"Decorator","containsRefs":false,"markdown":"\n\n\n### What are decorator ? \n\nA decorator is a special kind of callable that wraps another function or class to modify or enhance its behavior. They are used to apply repetitive operations or modifications across multiple functions or classes. You can introduce new behavior to functions or classes in several moments:\n\n1. At the time of their definition.   \n2. Just before they are called.    \n3. Right after they are called. \n\nTo illustrate how decorators works, consider the following example: we've have created a decorator named `dec`, a type of function that takes another function - let's say `hello` - as it parameter and that prints the name of the function. When you prepend `hello` with `@dec`, it effectively performs the operation `dec(hello)` behind the scenes.\n\n\n① - Prints the function name when the function is defined. Note the function is not called yet. \n\n```{python}\n#| echo: true\n#| warning: false\n#| class-output: highlight\n\ndef dec(func): \n    print(f\"Function: {func.__name__} is defined\") #① \n\n@dec\ndef hello():\n    print(\"hello\")\n```\n\n### Basic decorator \nLet's extent the decorator from previous section to add the following additional behavior when the function is called.\n\n① - Print start prior to calling the function   \n② - Call the actual function   \n③ - Print end after calling the function   \n\n```{python}\n#| echo: true\n#| warning: false\ndef dec(func): \n    print(f\"Function: {func.__name__} is defined\")\n    def wrapper():\n        print(\"start\") #①\n        func() #② \n        print(\"end\")#③\n    return wrapper\n\n@dec\ndef hello():\n    print(\"hello\")\nprint('-' * 40)\n\nhello()\n```\n\n### Handling arguments in a decorator \n\n① - Pass arguments in the function  \n② - Add args and kwargs in the wrapper function arguments  \n③ - Call the function with the args and kwargs passed    \n\n```{python}\n#| echo: true\n#| warning: false\ndef dec(func): \n    print(f\"Function: {func.__name__} is defined\")\n    def wrapper(*args,**kwargs): #②\n        print(\"start\") \n        func(*args,**kwargs) #③ \n        print(\"end\")\n    return wrapper\n\n@dec\ndef hello(x:str)->None:#①\n    \"\"\"concat hello with passed in string and print\"\"\"\n    print(f\"hello {x}\")\n\nhello('world')\n\nprint('-' * 40)\n\n#④\nprint(f\"Func. Name: {hello.__name__}\",sep='\\n')\nprint(f\"Docstring: {hello.__doc__}\",sep='\\n')\nprint(f\"Annotations: {hello.__annotations__}\",sep='\\n')\n\n```\n\n### Preserve decorator metadata\n\nWhen we use a decorator, the function `dec` is replaced by the `wrapper` function. This means we loose most of the properties like name, docstring, annotations, etc. We can use `functools.wraps`, which takes a function used in a decorator and add the functionality of copying over the function names, docstrings, annotation, etc. \n\n```{python}\nprint(f\"Func. Name: {hello.__name__}\",sep='\\n')\nprint(f\"Docstring: {hello.__doc__}\",sep='\\n')\nprint(f\"Annotations: {hello.__annotations__}\",sep='\\n')\n```\n\n```{python}\n#| echo: true\n#| warning: false\n\nfrom functools import wraps \n\ndef dec(func): \n    print(f\"Function: {func.__name__} is defined\")\n    @wraps(func)\n    def wrapper(*args,**kwargs): #②\n        print(\"start\") \n        func(*args,**kwargs) #③ \n        print(\"end\")\n    return wrapper\n\n@dec\ndef hello(x:str)->None: #①\n    \"\"\"concat hello with passed in string and print\"\"\"\n    print(f\"hello {x}\")\n\nhello('world')\n\n#④\nprint(f\"Func. Name: {hello.__name__}\",sep='\\n')\nprint(f\"Docstring: {hello.__doc__}\",sep='\\n')\nprint(f\"Annotations: {hello.__annotations__}\",sep='\\n')\n\n```\n\nReturning value from a decorated function\n\n```{python}\n#| echo: true\n#| warning: false\n\nfrom functools import wraps \n\ndef dec(func): \n    print(f\"Function: {func.__name__} is defined\")\n    @wraps(func)\n    def wrapper(*args,**kwargs): #②\n        print(\"start\") \n        result=func(*args,**kwargs) #①\n        print(\"end\")\n        return result #②\n    return wrapper\n\n@dec\ndef hello(x:str)->None: \n    \"\"\"concat hello with passed in string and print\"\"\"\n    print(f\"hello {x}\")\n    return 'hello'\n\nhello('world')\n```\n\n\nPassing  value to a decorator function \n\n```{python}\n#| echo: true\n#| warning: false\n\nfrom functools import wraps \n\ndef dec(a,b): \n    def dec_decorator(func):\n        print(f\"Function: {func.__name__} is defined\")\n        @wraps(func)\n        def wrapper(*args,**kwargs): #②\n            print(f\"start:{a}\") \n            result=func(*args,**kwargs) #①\n            print(f\"end:{b}\")\n            return result #②\n        return wrapper\n    return dec_decorator\n\n@dec('a','b')\ndef hello(x:str)->None: \n    \"\"\"concat hello with passed in string and print\"\"\"\n    print(f\"hello {x}\")\n    return 'hello'\n\nhello('world')\n```\n\nExample of a decorator \n\n\n```{python}\n\nfrom functools import wraps\nfrom time import perf_counter\ndef timer(func):\n    @wraps(func)\n    def wrapper(*args,**kwargs):\n        start_time=perf_counter()\n        func(*args,**kwargs)\n        end_time=perf_counter()\n        print(f\"\\N{Greek Capital Letter Delta} {end_time-start_time:.4f} sec\")\n    return wrapper\n\n@timer\ndef process_list(n=10000):\n    return sum(range(n))\n\nprocess_list()\n```\n\n\n```{python}\n\n```\n","srcMarkdownNoYaml":"\n\n## Decorator \n\n### What are decorator ? \n\nA decorator is a special kind of callable that wraps another function or class to modify or enhance its behavior. They are used to apply repetitive operations or modifications across multiple functions or classes. You can introduce new behavior to functions or classes in several moments:\n\n1. At the time of their definition.   \n2. Just before they are called.    \n3. Right after they are called. \n\nTo illustrate how decorators works, consider the following example: we've have created a decorator named `dec`, a type of function that takes another function - let's say `hello` - as it parameter and that prints the name of the function. When you prepend `hello` with `@dec`, it effectively performs the operation `dec(hello)` behind the scenes.\n\n\n① - Prints the function name when the function is defined. Note the function is not called yet. \n\n```{python}\n#| echo: true\n#| warning: false\n#| class-output: highlight\n\ndef dec(func): \n    print(f\"Function: {func.__name__} is defined\") #① \n\n@dec\ndef hello():\n    print(\"hello\")\n```\n\n### Basic decorator \nLet's extent the decorator from previous section to add the following additional behavior when the function is called.\n\n① - Print start prior to calling the function   \n② - Call the actual function   \n③ - Print end after calling the function   \n\n```{python}\n#| echo: true\n#| warning: false\ndef dec(func): \n    print(f\"Function: {func.__name__} is defined\")\n    def wrapper():\n        print(\"start\") #①\n        func() #② \n        print(\"end\")#③\n    return wrapper\n\n@dec\ndef hello():\n    print(\"hello\")\nprint('-' * 40)\n\nhello()\n```\n\n### Handling arguments in a decorator \n\n① - Pass arguments in the function  \n② - Add args and kwargs in the wrapper function arguments  \n③ - Call the function with the args and kwargs passed    \n\n```{python}\n#| echo: true\n#| warning: false\ndef dec(func): \n    print(f\"Function: {func.__name__} is defined\")\n    def wrapper(*args,**kwargs): #②\n        print(\"start\") \n        func(*args,**kwargs) #③ \n        print(\"end\")\n    return wrapper\n\n@dec\ndef hello(x:str)->None:#①\n    \"\"\"concat hello with passed in string and print\"\"\"\n    print(f\"hello {x}\")\n\nhello('world')\n\nprint('-' * 40)\n\n#④\nprint(f\"Func. Name: {hello.__name__}\",sep='\\n')\nprint(f\"Docstring: {hello.__doc__}\",sep='\\n')\nprint(f\"Annotations: {hello.__annotations__}\",sep='\\n')\n\n```\n\n### Preserve decorator metadata\n\nWhen we use a decorator, the function `dec` is replaced by the `wrapper` function. This means we loose most of the properties like name, docstring, annotations, etc. We can use `functools.wraps`, which takes a function used in a decorator and add the functionality of copying over the function names, docstrings, annotation, etc. \n\n```{python}\nprint(f\"Func. Name: {hello.__name__}\",sep='\\n')\nprint(f\"Docstring: {hello.__doc__}\",sep='\\n')\nprint(f\"Annotations: {hello.__annotations__}\",sep='\\n')\n```\n\n```{python}\n#| echo: true\n#| warning: false\n\nfrom functools import wraps \n\ndef dec(func): \n    print(f\"Function: {func.__name__} is defined\")\n    @wraps(func)\n    def wrapper(*args,**kwargs): #②\n        print(\"start\") \n        func(*args,**kwargs) #③ \n        print(\"end\")\n    return wrapper\n\n@dec\ndef hello(x:str)->None: #①\n    \"\"\"concat hello with passed in string and print\"\"\"\n    print(f\"hello {x}\")\n\nhello('world')\n\n#④\nprint(f\"Func. Name: {hello.__name__}\",sep='\\n')\nprint(f\"Docstring: {hello.__doc__}\",sep='\\n')\nprint(f\"Annotations: {hello.__annotations__}\",sep='\\n')\n\n```\n\nReturning value from a decorated function\n\n```{python}\n#| echo: true\n#| warning: false\n\nfrom functools import wraps \n\ndef dec(func): \n    print(f\"Function: {func.__name__} is defined\")\n    @wraps(func)\n    def wrapper(*args,**kwargs): #②\n        print(\"start\") \n        result=func(*args,**kwargs) #①\n        print(\"end\")\n        return result #②\n    return wrapper\n\n@dec\ndef hello(x:str)->None: \n    \"\"\"concat hello with passed in string and print\"\"\"\n    print(f\"hello {x}\")\n    return 'hello'\n\nhello('world')\n```\n\n\nPassing  value to a decorator function \n\n```{python}\n#| echo: true\n#| warning: false\n\nfrom functools import wraps \n\ndef dec(a,b): \n    def dec_decorator(func):\n        print(f\"Function: {func.__name__} is defined\")\n        @wraps(func)\n        def wrapper(*args,**kwargs): #②\n            print(f\"start:{a}\") \n            result=func(*args,**kwargs) #①\n            print(f\"end:{b}\")\n            return result #②\n        return wrapper\n    return dec_decorator\n\n@dec('a','b')\ndef hello(x:str)->None: \n    \"\"\"concat hello with passed in string and print\"\"\"\n    print(f\"hello {x}\")\n    return 'hello'\n\nhello('world')\n```\n\nExample of a decorator \n\n\n```{python}\n\nfrom functools import wraps\nfrom time import perf_counter\ndef timer(func):\n    @wraps(func)\n    def wrapper(*args,**kwargs):\n        start_time=perf_counter()\n        func(*args,**kwargs)\n        end_time=perf_counter()\n        print(f\"\\N{Greek Capital Letter Delta} {end_time-start_time:.4f} sec\")\n    return wrapper\n\n@timer\ndef process_list(n=10000):\n    return sum(range(n))\n\nprocess_list()\n```\n\n\n```{python}\n\n```\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":true,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"jupyter"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["../../styles.css"],"output-file":"index.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.4.550","theme":"pulse","title-block-banner":true,"title":"Decorators","author":"Naveenan Arjunan","date":"2024-03-02","categories":["python","advanced-python"]},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}