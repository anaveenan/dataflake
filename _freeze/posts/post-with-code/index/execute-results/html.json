{
  "hash": "723bdacee20cb072485206a4cfe675c3",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: 'Pandas Mastery: SQL Operations Made Easy'\nauthor: Naveenan Arjunan\ndate: '2024-03-02'\ncategories:\n  - pandas\n  - sql\n  - analysis\nimage: image.jpg\n---\n\n## Introduction\n\nData analysis often involves working with structured datasets organized in rows and columns. While SQL has long been the go-to language for manipulating such data, Python's Pandas library offers comparable functionality with added flexibility. This post explores how to perform essential SQL-like operations in Pandas, providing a bridge for analysts transitioning between these two powerful tools. \n\n## Setting Up the Environment\n\nLet's begin by importing the necessary libraries and loading our dataset:\n\n::: {#6c806d93 .cell execution_count=1}\n``` {.python .cell-code}\nimport pandas as pd\nimport numpy as np\npd.options.display.max_rows = 20\ndf = pd.read_csv(\"https://raw.githubusercontent.com/mwaskom/seaborn-data/master/tips.csv\")\ndf.head(5)\n```\n\n::: {.cell-output .cell-output-display execution_count=1}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>total_bill</th>\n      <th>tip</th>\n      <th>sex</th>\n      <th>smoker</th>\n      <th>day</th>\n      <th>time</th>\n      <th>size</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>16.99</td>\n      <td>1.01</td>\n      <td>Female</td>\n      <td>No</td>\n      <td>Sun</td>\n      <td>Dinner</td>\n      <td>2</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>10.34</td>\n      <td>1.66</td>\n      <td>Male</td>\n      <td>No</td>\n      <td>Sun</td>\n      <td>Dinner</td>\n      <td>3</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>21.01</td>\n      <td>3.50</td>\n      <td>Male</td>\n      <td>No</td>\n      <td>Sun</td>\n      <td>Dinner</td>\n      <td>3</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>23.68</td>\n      <td>3.31</td>\n      <td>Male</td>\n      <td>No</td>\n      <td>Sun</td>\n      <td>Dinner</td>\n      <td>2</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>24.59</td>\n      <td>3.61</td>\n      <td>Female</td>\n      <td>No</td>\n      <td>Sun</td>\n      <td>Dinner</td>\n      <td>4</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n## Selecting columns\n\nIn Pandas, column selection is straightforward using the .loc accessor:\n\n::: {#80212ac3 .cell execution_count=2}\n``` {.python .cell-code}\n(df\n .loc[:,['tip','sex']] # ①\n .head() \n)\n```\n\n::: {.cell-output .cell-output-display execution_count=2}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>tip</th>\n      <th>sex</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1.01</td>\n      <td>Female</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1.66</td>\n      <td>Male</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>3.50</td>\n      <td>Male</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>3.31</td>\n      <td>Male</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>3.61</td>\n      <td>Female</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nFor more dynamic selection, we can use list comprehensions:\n\n::: {#4382ecc6 .cell execution_count=3}\n``` {.python .cell-code}\n(df\n .loc[:,[col for col in df.columns if col.startswith('t')]] # ②\n .head() \n)\n```\n\n::: {.cell-output .cell-output-display execution_count=3}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>total_bill</th>\n      <th>tip</th>\n      <th>time</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>16.99</td>\n      <td>1.01</td>\n      <td>Dinner</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>10.34</td>\n      <td>1.66</td>\n      <td>Dinner</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>21.01</td>\n      <td>3.50</td>\n      <td>Dinner</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>23.68</td>\n      <td>3.31</td>\n      <td>Dinner</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>24.59</td>\n      <td>3.61</td>\n      <td>Dinner</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nIn the code above, ① demonstrates basic column selection, while ② shows a more advanced technique using a list comprehension. This method ② is particularly useful when you need to select columns based on a specific condition, such as all columns starting with a certain letter.\n\n## Column Manipulation\n\nUse the `.assign` method to create or modify columns:\n\n::: {#52fcde03 .cell execution_count=4}\n``` {.python .cell-code}\n(df\n .loc[:, ['total_bill', 'tip', 'sex', 'day', 'time']]\n .assign(percentage_tip=lambda x: x['tip'] / x['total_bill'])  # ①\n .assign(tip=lambda x: x['tip'] + 1)  # ②\n .assign(count=1)  # ③\n .head()\n)\n```\n\n::: {.cell-output .cell-output-display execution_count=4}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>total_bill</th>\n      <th>tip</th>\n      <th>sex</th>\n      <th>day</th>\n      <th>time</th>\n      <th>percentage_tip</th>\n      <th>count</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>16.99</td>\n      <td>2.01</td>\n      <td>Female</td>\n      <td>Sun</td>\n      <td>Dinner</td>\n      <td>0.059447</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>10.34</td>\n      <td>2.66</td>\n      <td>Male</td>\n      <td>Sun</td>\n      <td>Dinner</td>\n      <td>0.160542</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>21.01</td>\n      <td>4.50</td>\n      <td>Male</td>\n      <td>Sun</td>\n      <td>Dinner</td>\n      <td>0.166587</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>23.68</td>\n      <td>4.31</td>\n      <td>Male</td>\n      <td>Sun</td>\n      <td>Dinner</td>\n      <td>0.139780</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>24.59</td>\n      <td>4.61</td>\n      <td>Female</td>\n      <td>Sun</td>\n      <td>Dinner</td>\n      <td>0.146808</td>\n      <td>1</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nHere, ① calculates a new column, ② modifies an existing column, and ③ adds a constant value column. This demonstrates the versatility of assign() in performing various column operations in a single chain.\n\n## Filtering Rows\n\nUse the `.loc` method to filter rows:\n\n::: {#2a85b9d6 .cell execution_count=5}\n``` {.python .cell-code}\n#Filter only transaction with more than 15% in tips\n(df\n .loc[:,['total_bill','tip','sex','day','time']]\n .assign(percentage_tip=lambda x:x['tip']/x['total_bill'])\n .loc[lambda x:x['percentage_tip']>.15,:] # ①\n .head()\n)\n```\n\n::: {.cell-output .cell-output-display execution_count=5}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>total_bill</th>\n      <th>tip</th>\n      <th>sex</th>\n      <th>day</th>\n      <th>time</th>\n      <th>percentage_tip</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>1</th>\n      <td>10.34</td>\n      <td>1.66</td>\n      <td>Male</td>\n      <td>Sun</td>\n      <td>Dinner</td>\n      <td>0.160542</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>21.01</td>\n      <td>3.50</td>\n      <td>Male</td>\n      <td>Sun</td>\n      <td>Dinner</td>\n      <td>0.166587</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>25.29</td>\n      <td>4.71</td>\n      <td>Male</td>\n      <td>Sun</td>\n      <td>Dinner</td>\n      <td>0.186240</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>8.77</td>\n      <td>2.00</td>\n      <td>Male</td>\n      <td>Sun</td>\n      <td>Dinner</td>\n      <td>0.228050</td>\n    </tr>\n    <tr>\n      <th>9</th>\n      <td>14.78</td>\n      <td>3.23</td>\n      <td>Male</td>\n      <td>Sun</td>\n      <td>Dinner</td>\n      <td>0.218539</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nThe filter condition ① uses a lambda function within .loc[] to select rows where the tip percentage exceeds 15%. This approach provides a clean, SQL-like syntax for row filtering.\n\n::: {#70c0ee92 .cell execution_count=6}\n``` {.python .cell-code}\n#Filter only transactions happend on Sunday and Monday\n(df\n .loc[:,['total_bill','tip','sex','day','time']]\n .loc[lambda x:x['day'].isin(['Sun','Mon']),:]\n .head()\n)\n```\n\n::: {.cell-output .cell-output-display execution_count=6}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>total_bill</th>\n      <th>tip</th>\n      <th>sex</th>\n      <th>day</th>\n      <th>time</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>16.99</td>\n      <td>1.01</td>\n      <td>Female</td>\n      <td>Sun</td>\n      <td>Dinner</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>10.34</td>\n      <td>1.66</td>\n      <td>Male</td>\n      <td>Sun</td>\n      <td>Dinner</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>21.01</td>\n      <td>3.50</td>\n      <td>Male</td>\n      <td>Sun</td>\n      <td>Dinner</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>23.68</td>\n      <td>3.31</td>\n      <td>Male</td>\n      <td>Sun</td>\n      <td>Dinner</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>24.59</td>\n      <td>3.61</td>\n      <td>Female</td>\n      <td>Sun</td>\n      <td>Dinner</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n## Grouping and Aggregation\n\nPandas offers powerful grouping and aggregation capabilities:\n\n::: {#03b779a4 .cell execution_count=7}\n``` {.python .cell-code}\n(df\n .groupby(['day'])  # ①\n .agg(avg_bill=('total_bill', 'mean'),  # ②\n      total_bill=('total_bill', 'sum'))\n .reset_index()\n)\n```\n\n::: {.cell-output .cell-output-display execution_count=7}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>day</th>\n      <th>avg_bill</th>\n      <th>total_bill</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>Fri</td>\n      <td>17.151579</td>\n      <td>325.88</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>Sat</td>\n      <td>20.441379</td>\n      <td>1778.40</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>Sun</td>\n      <td>21.410000</td>\n      <td>1627.16</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>Thur</td>\n      <td>17.682742</td>\n      <td>1096.33</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nIn this example, ① groups the data by the 'day' column, and ② applies multiple aggregations. The agg() method allows for clear specification of column names and aggregation functions, similar to SQL's GROUP BY and aggregate functions.\n\n## Ordering Rows\n\nSorting data in Pandas is achieved using the .sort_values method:\n\n::: {#6dbaef27 .cell execution_count=8}\n``` {.python .cell-code}\n#By day get average and total bill.Sort the output by total_bill\n(df\n .groupby(['day'])\n .agg(avg_bill=('total_bill','mean')\n     ,total_bill=('total_bill','sum'))\n .reset_index()\n .sort_values(['total_bill'],ascending=[False]) # ①\n)\n```\n\n::: {.cell-output .cell-output-display execution_count=8}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>day</th>\n      <th>avg_bill</th>\n      <th>total_bill</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>1</th>\n      <td>Sat</td>\n      <td>20.441379</td>\n      <td>1778.40</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>Sun</td>\n      <td>21.410000</td>\n      <td>1627.16</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>Thur</td>\n      <td>17.682742</td>\n      <td>1096.33</td>\n    </tr>\n    <tr>\n      <th>0</th>\n      <td>Fri</td>\n      <td>17.151579</td>\n      <td>325.88</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nThe sorting operation ① is equivalent to SQL's ORDER BY clause. It allows for sorting by multiple columns and specifying the sort order (ascending or descending).\n\n## Window Functions\n\nPandas can replicate complex SQL window functions:\n\n::: {.callout-note}\nWindow functions in Pandas, while powerful, can be complex. They offer advanced data manipulation capabilities similar to those in SQL.\n:::\n\n::: {#0ea763b7 .cell execution_count=9}\n``` {.python .cell-code}\n(df\n .assign(row_number=lambda x:x.sort_values(['total_bill'],ascending=[True]).groupby(['day']).cumcount()+1)  # ①\n .assign(prev_bill=lambda x:x.sort_values(['total_bill'],ascending=[True]).groupby(['day'])['total_bill'].shift(1)) # ②\n .assign(next_bill=lambda x:x.sort_values(['total_bill'],ascending=[True]).groupby(['day'])['total_bill'].shift(-1)) # \n .sort_values(['row_number'])\n .head()\n)\n```\n\n::: {.cell-output .cell-output-display execution_count=9}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>total_bill</th>\n      <th>tip</th>\n      <th>sex</th>\n      <th>smoker</th>\n      <th>day</th>\n      <th>time</th>\n      <th>size</th>\n      <th>row_number</th>\n      <th>prev_bill</th>\n      <th>next_bill</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>67</th>\n      <td>3.07</td>\n      <td>1.00</td>\n      <td>Female</td>\n      <td>Yes</td>\n      <td>Sat</td>\n      <td>Dinner</td>\n      <td>1</td>\n      <td>1</td>\n      <td>NaN</td>\n      <td>7.25</td>\n    </tr>\n    <tr>\n      <th>172</th>\n      <td>7.25</td>\n      <td>5.15</td>\n      <td>Male</td>\n      <td>Yes</td>\n      <td>Sun</td>\n      <td>Dinner</td>\n      <td>2</td>\n      <td>1</td>\n      <td>NaN</td>\n      <td>8.77</td>\n    </tr>\n    <tr>\n      <th>149</th>\n      <td>7.51</td>\n      <td>2.00</td>\n      <td>Male</td>\n      <td>No</td>\n      <td>Thur</td>\n      <td>Lunch</td>\n      <td>2</td>\n      <td>1</td>\n      <td>NaN</td>\n      <td>7.56</td>\n    </tr>\n    <tr>\n      <th>92</th>\n      <td>5.75</td>\n      <td>1.00</td>\n      <td>Female</td>\n      <td>Yes</td>\n      <td>Fri</td>\n      <td>Dinner</td>\n      <td>2</td>\n      <td>1</td>\n      <td>NaN</td>\n      <td>8.58</td>\n    </tr>\n    <tr>\n      <th>222</th>\n      <td>8.58</td>\n      <td>1.92</td>\n      <td>Male</td>\n      <td>Yes</td>\n      <td>Fri</td>\n      <td>Lunch</td>\n      <td>1</td>\n      <td>2</td>\n      <td>5.75</td>\n      <td>10.09</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nHere, ① creates a row number within each day group, sorted by total bill, similar to SQL's ROW_NUMBER() function. ② calculates the previous bill amount within each day group, mimicking SQL's LAG() function. ③ computes the next bill amount within each day group, equivalent to SQL's LEAD() function.\n\n::: {#11266cc7 .cell execution_count=10}\n``` {.python .cell-code}\n(df\n .assign(sum_bill_day=lambda x:x.groupby(['day'])['total_bill'].transform('sum')) # ④\n .assign(cum_tip_day=lambda x:x.sort_values(['total_bill']).groupby(['day'])['tip'].cumsum()) # ⑤\n .assign(rolling_3d_sum=lambda x:x.sort_values(['total_bill']).groupby(['day'])['tip'].rolling(window=2,min_periods=1).sum().reset_index(drop=True, level=0)) # ⑥\n .query(\"day=='Sat'\")\n .sort_values(['total_bill'])\n .head()\n)\n```\n\n::: {.cell-output .cell-output-display execution_count=10}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>total_bill</th>\n      <th>tip</th>\n      <th>sex</th>\n      <th>smoker</th>\n      <th>day</th>\n      <th>time</th>\n      <th>size</th>\n      <th>sum_bill_day</th>\n      <th>cum_tip_day</th>\n      <th>rolling_3d_sum</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>67</th>\n      <td>3.07</td>\n      <td>1.00</td>\n      <td>Female</td>\n      <td>Yes</td>\n      <td>Sat</td>\n      <td>Dinner</td>\n      <td>1</td>\n      <td>1778.4</td>\n      <td>1.00</td>\n      <td>1.00</td>\n    </tr>\n    <tr>\n      <th>111</th>\n      <td>7.25</td>\n      <td>1.00</td>\n      <td>Female</td>\n      <td>No</td>\n      <td>Sat</td>\n      <td>Dinner</td>\n      <td>1</td>\n      <td>1778.4</td>\n      <td>2.00</td>\n      <td>2.00</td>\n    </tr>\n    <tr>\n      <th>218</th>\n      <td>7.74</td>\n      <td>1.44</td>\n      <td>Male</td>\n      <td>Yes</td>\n      <td>Sat</td>\n      <td>Dinner</td>\n      <td>2</td>\n      <td>1778.4</td>\n      <td>3.44</td>\n      <td>2.44</td>\n    </tr>\n    <tr>\n      <th>30</th>\n      <td>9.55</td>\n      <td>1.45</td>\n      <td>Male</td>\n      <td>No</td>\n      <td>Sat</td>\n      <td>Dinner</td>\n      <td>2</td>\n      <td>1778.4</td>\n      <td>4.89</td>\n      <td>2.89</td>\n    </tr>\n    <tr>\n      <th>235</th>\n      <td>10.07</td>\n      <td>1.25</td>\n      <td>Male</td>\n      <td>No</td>\n      <td>Sat</td>\n      <td>Dinner</td>\n      <td>2</td>\n      <td>1778.4</td>\n      <td>6.14</td>\n      <td>2.70</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n④ Calculates the sum of total bills for each day, equivalent to `SUM(total_bill) OVER (PARTITION BY day)` in SQL.\n⑤ Computes the cumulative sum of tips within each day, ordered by total bill. This is similar to `SUM(tip) OVER (PARTITION BY day ORDER BY total_bill ASC)` in SQL.\n⑥ Performs a rolling sum of tips over a 2-row window (current row and 1 preceding) within each day, ordered by total bill. This complex operation is akin to `SUM(tip) OVER (PARTITION BY day ORDER BY total_bill ROWS BETWEEN 1 PRECEDING AND CURRENT ROW)` in SQL.\n\n## Conclusion\n\nThis guide demonstrates how Pandas can effectively replicate key SQL operations. By mastering these techniques, analysts can seamlessly transition between SQL and Pandas, choosing the most appropriate tool for their specific data analysis needs.\n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\" data-relocate-top=\"true\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}